#summary JavaCV versions of C++ examples from book "OpenCV2 Computer Vision Applications Programming Cookbook"
#labels Featured

<wiki:toc max_depth="1" />

= Overview =

[http://opencv.willowgarage.com/ OpenCV] (Open Source Computer Vision) is a library of several hundred algorithms for computer vision and video analysis. 
It started in the late 90’s as a C library; in version 2 a C++ API was added. 

[https://code.google.com/p/javacv/ JavaCV] is a wrapper that allows accessing the OpenCV library directly from within Java Virtual Machine (JVM) and Android platform. 
JavaCV wraps C API wherever possible, and C++ API when necessary.

The OpenCV_Cookbok example module is intended as a companion to the book “[http://www.laganiere.name/opencvCookbook/ OpenCV 2 Computer Vision Application Programming Cookbook]” by Robert Laganière. 
In what follows we will refer to them as the (JVM) example module and the Cookbook, respectively. 
The original examples in the Cookbook are written in C++, sometimes using parts of OpenCV that are not accessible from JavaCV. 
This example module shows how to use OpenCV C API, available through JavaCV, to perform the same tasks.

The code in the example module is written in [http://www.scala-lang.org Scala], one of the leading JVM languages. 
It can be easily converted to Java and other languages running on JVM, for instance, [http://groovy.codehaus.org/ Groovy]. 

= Quick Sample =
Here is a quick preview that compares an original C++ example in the Cookbook (p. 18) 
with code in Scala and Java using JavaCV wrapper.

Here is the original C++ example that opens an image (without error cheking), creates a window, 
displayes image in the window, and waits for 5 seconds before exiting.

{{{
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>

int main() {

    // read an image
    cv::Mat image = cv::imread("boldt.jpg");
    
    // create image window named "My Image"
    cv::namedWindow("My Image");
    
    // show image on window
    cv::imshow("My Image", image);
    
    // wait kwy for 5000 ms
    cv::waitKey(5000);

    return 1;
}
}}}

The above C++ example translated to Scala using JavaCV wrapper:
{{{
import com.googlecode.javacv.CanvasFrame
import com.googlecode.javacv.cpp.opencv_highgui._

object MyFirstOpenCVApp extends App {
    
    // read an image
    val image = cvLoadImage("boldt.jpg")

    // create image window named "My Image"
    val canvas = new CanvasFrame("My Image")

    // request closing of the application when the image window is closed
    canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE)

    // show image on window
   canvas.showImage(image)
}
}}}

Now the same example expressed in a Java. Note that use of JavaCV API is exactly the same in Scala and Java code.
{{{
import com.googlecode.javacv.CanvasFrame;
import static com.googlecode.javacv.cpp.opencv_core.IplImage;
import static com.googlecode.javacv.cpp.opencv_highgui.cvLoadImage;

public class MyFirstOpenCVApp {

    public static void main(String[] args) {
        
        // read an image
        final IplImage image = cvLoadImage("boldt.jpg");
        
        // create image window named "My Image"
        final CanvasFrame canvas = new CanvasFrame("My Image");
        
        // request closing of the application when the image window is closed
        canvas.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
                
        // show image on window
        canvas.showImage(image);
    }
}
}}}

=How to use JavaCV Examples=
This example module is intended as a companion to the Cookbook. The recommended way is to read the Cookbook and refer to JavaCV examples when in doubt how to translate the Cookbook’s C++ code to JavaCV. The Cookbook provides explanation how the algorithms work. The JavaCV examples provide only very brief comments.

Simplest way to use the JavaCV examples is to browse the code [https://code.google.com/p/javacv-examples/source/browse/#svn%2Ftrunk%2FOpenCV2_Cookbook%2Fsrc%2Fopencv2_cookbook on-line] or use SVN to check them out to your computer [https://code.google.com/p/javacv-examples/source/checkout] 

With a little bit of setup you can execute the examples on you own computer. The benefit is that you can start modifying the examples and build your own algorithms. The setup is explained in this module commons for Chapter 1.

=Organization of the Example Code=
The code is organized into packages that correspond to chapters in the Cookbook, for instance [https://code.google.com/p/javacv-examples/source/browse/#svn%2Ftrunk%2FOpenCV2_Cookbook%2Fsrc%2Fopencv2_cookbook%2Fchapter08 opencv2_cookbook.chpater8]. Individual examples roughly correspond to sections within each chapter.

=Why Scala?=
[http://www.scala-lang.org Scala] was chosen since it is more expressive than Java. You can achieve the same result with smaller amount of code. Smaller boilerplate code makes examples easier to read and understand. Unlike many other JVM languages, compiled Scala code is fast, on par with Java. Custom image processing code may require loops over image pixels. Specialized Scala compiler plugins, like [https://code.google.com/p/scalacl/wiki/ScalaCLPlugin ScalaCL], can optimize and significantly speed up execution of loops. 
Scala supports writing of scripts, code that can be executed without explicit compiling. Scala also has a console, called REPL, where single lines of code can be typed in and executed on a spot. Both of those features make prototyping of OpenCV-based programs easier in Scala than in Java.
Last but not least, IDE support for Scala reached level of maturity allowing easy creation, modification, and execution of Scala code. In particular, the Scala plugin for JetBrains IDEA works very well. Scala plugins Eclipse and NetBeans are also improving

